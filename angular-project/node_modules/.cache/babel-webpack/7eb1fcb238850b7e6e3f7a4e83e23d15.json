{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, ɵmemoizeInstance, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone } from '@angular/core';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { collectionChanges as collectionChanges$1, collection as collection$1, sortedChanges as sortedChanges$1, auditTrail as auditTrail$1, collectionData as collectionData$1, doc as doc$1, docData as docData$1, snapToData as snapToData$1, fromRef as fromRef$1 } from 'rxfire/firestore';\nimport { addDoc as addDoc$1, arrayRemove as arrayRemove$1, arrayUnion as arrayUnion$1, clearIndexedDbPersistence as clearIndexedDbPersistence$1, collection as collection$2, collectionGroup as collectionGroup$1, connectFirestoreEmulator as connectFirestoreEmulator$1, deleteDoc as deleteDoc$1, deleteField as deleteField$1, disableNetwork as disableNetwork$1, doc as doc$2, documentId as documentId$1, enableIndexedDbPersistence as enableIndexedDbPersistence$1, enableMultiTabIndexedDbPersistence as enableMultiTabIndexedDbPersistence$1, enableNetwork as enableNetwork$1, endAt as endAt$1, endBefore as endBefore$1, getDoc as getDoc$1, getDocFromCache as getDocFromCache$1, getDocFromServer as getDocFromServer$1, getDocs as getDocs$1, getDocsFromCache as getDocsFromCache$1, getDocsFromServer as getDocsFromServer$1, getFirestore as getFirestore$1, increment as increment$1, initializeFirestore as initializeFirestore$1, limit as limit$1, limitToLast as limitToLast$1, loadBundle as loadBundle$1, namedQuery as namedQuery$1, onSnapshot as onSnapshot$1, onSnapshotsInSync as onSnapshotsInSync$1, orderBy as orderBy$1, query as query$1, queryEqual as queryEqual$1, refEqual as refEqual$1, runTransaction as runTransaction$1, serverTimestamp as serverTimestamp$1, setDoc as setDoc$1, setLogLevel as setLogLevel$1, snapshotEqual as snapshotEqual$1, startAfter as startAfter$1, startAt as startAt$1, terminate as terminate$1, updateDoc as updateDoc$1, waitForPendingWrites as waitForPendingWrites$1, where as where$1, writeBatch as writeBatch$1 } from 'firebase/firestore';\nexport * from 'firebase/firestore';\n\nclass Firestore {\n  constructor(firestore) {\n    return firestore;\n  }\n\n}\n\nconst FIRESTORE_PROVIDER_NAME = 'firestore';\n\nclass FirestoreInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(FIRESTORE_PROVIDER_NAME);\n  }\n\n}\n\nconst firestoreInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(FIRESTORE_PROVIDER_NAME))), distinct());\nconst PROVIDED_FIRESTORE_INSTANCES = new InjectionToken('angularfire2.firestore-instances');\n\nfunction defaultFirestoreInstanceFactory(provided, defaultApp) {\n  const defaultFirestore = ɵgetDefaultInstanceOf(FIRESTORE_PROVIDER_NAME, provided, defaultApp); // TODO how do I throw if it's undefined, unless @Optional(), is there an Angular NULL_INJECTOR token\n  // or something, can I use an @NgModule providers or something?\n\n  return new Firestore(defaultFirestore);\n}\n\nfunction firestoreInstanceFactory(fn) {\n  return zone => {\n    const firestore = ɵmemoizeInstance(fn, zone);\n    return new Firestore(firestore);\n  };\n}\n\nconst FIRESTORE_INSTANCES_PROVIDER = {\n  provide: FirestoreInstances,\n  deps: [[new Optional(), PROVIDED_FIRESTORE_INSTANCES]]\n};\nconst DEFAULT_FIRESTORE_INSTANCE_PROVIDER = {\n  provide: Firestore,\n  useFactory: defaultFirestoreInstanceFactory,\n  deps: [[new Optional(), PROVIDED_FIRESTORE_INSTANCES], FirebaseApp]\n};\n\nclass FirestoreModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fst');\n  }\n\n}\n\nFirestoreModule.ɵfac = function FirestoreModule_Factory(t) {\n  return new (t || FirestoreModule)();\n};\n\nFirestoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FirestoreModule\n});\nFirestoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FirestoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideFirestore(fn) {\n  return {\n    ngModule: FirestoreModule,\n    providers: [{\n      provide: PROVIDED_FIRESTORE_INSTANCES,\n      useFactory: firestoreInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, ɵAngularFireSchedulers, FirebaseApps, // Firestore+Auth work better if Auth is loaded first\n      [new Optional(), AuthInstances]]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst collectionChanges = ɵzoneWrap(collectionChanges$1, true);\nconst collectionSnapshots = ɵzoneWrap(collection$1, true);\nconst sortedChanges = ɵzoneWrap(sortedChanges$1, true);\nconst auditTrail = ɵzoneWrap(auditTrail$1, true);\nconst collectionData = ɵzoneWrap(collectionData$1, true);\nconst docSnapshots = ɵzoneWrap(doc$1, true);\nconst docData = ɵzoneWrap(docData$1, true);\nconst snapToData = ɵzoneWrap(snapToData$1, true);\nconst fromRef = ɵzoneWrap(fromRef$1, true); // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst addDoc = ɵzoneWrap(addDoc$1, true);\nconst arrayRemove = ɵzoneWrap(arrayRemove$1, true);\nconst arrayUnion = ɵzoneWrap(arrayUnion$1, true);\nconst clearIndexedDbPersistence = ɵzoneWrap(clearIndexedDbPersistence$1, true);\nconst collection = ɵzoneWrap(collection$2, true);\nconst collectionGroup = ɵzoneWrap(collectionGroup$1, true);\nconst connectFirestoreEmulator = ɵzoneWrap(connectFirestoreEmulator$1, true);\nconst deleteDoc = ɵzoneWrap(deleteDoc$1, true);\nconst deleteField = ɵzoneWrap(deleteField$1, true);\nconst disableNetwork = ɵzoneWrap(disableNetwork$1, true);\nconst doc = ɵzoneWrap(doc$2, true);\nconst documentId = ɵzoneWrap(documentId$1, true);\nconst enableIndexedDbPersistence = ɵzoneWrap(enableIndexedDbPersistence$1, true);\nconst enableMultiTabIndexedDbPersistence = ɵzoneWrap(enableMultiTabIndexedDbPersistence$1, true);\nconst enableNetwork = ɵzoneWrap(enableNetwork$1, true);\nconst endAt = ɵzoneWrap(endAt$1, true);\nconst endBefore = ɵzoneWrap(endBefore$1, true);\nconst getDoc = ɵzoneWrap(getDoc$1, true);\nconst getDocFromCache = ɵzoneWrap(getDocFromCache$1, true);\nconst getDocFromServer = ɵzoneWrap(getDocFromServer$1, true);\nconst getDocs = ɵzoneWrap(getDocs$1, true);\nconst getDocsFromCache = ɵzoneWrap(getDocsFromCache$1, true);\nconst getDocsFromServer = ɵzoneWrap(getDocsFromServer$1, true);\nconst getFirestore = ɵzoneWrap(getFirestore$1, true);\nconst increment = ɵzoneWrap(increment$1, true);\nconst initializeFirestore = ɵzoneWrap(initializeFirestore$1, true);\nconst limit = ɵzoneWrap(limit$1, true);\nconst limitToLast = ɵzoneWrap(limitToLast$1, true);\nconst loadBundle = ɵzoneWrap(loadBundle$1, true);\nconst namedQuery = ɵzoneWrap(namedQuery$1, true);\nconst onSnapshot = ɵzoneWrap(onSnapshot$1, true);\nconst onSnapshotsInSync = ɵzoneWrap(onSnapshotsInSync$1, true);\nconst orderBy = ɵzoneWrap(orderBy$1, true);\nconst query = ɵzoneWrap(query$1, true);\nconst queryEqual = ɵzoneWrap(queryEqual$1, true);\nconst refEqual = ɵzoneWrap(refEqual$1, true);\nconst runTransaction = ɵzoneWrap(runTransaction$1, true);\nconst serverTimestamp = ɵzoneWrap(serverTimestamp$1, true);\nconst setDoc = ɵzoneWrap(setDoc$1, true);\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\nconst snapshotEqual = ɵzoneWrap(snapshotEqual$1, true);\nconst startAfter = ɵzoneWrap(startAfter$1, true);\nconst startAt = ɵzoneWrap(startAt$1, true);\nconst terminate = ɵzoneWrap(terminate$1, true);\nconst updateDoc = ɵzoneWrap(updateDoc$1, true);\nconst waitForPendingWrites = ɵzoneWrap(waitForPendingWrites$1, true);\nconst where = ɵzoneWrap(where$1, true);\nconst writeBatch = ɵzoneWrap(writeBatch$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Firestore, FirestoreInstances, FirestoreModule, addDoc, arrayRemove, arrayUnion, auditTrail, clearIndexedDbPersistence, collection, collectionChanges, collectionData, collectionGroup, collectionSnapshots, connectFirestoreEmulator, deleteDoc, deleteField, disableNetwork, doc, docData, docSnapshots, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, endAt, endBefore, firestoreInstance$, fromRef, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, increment, initializeFirestore, limit, limitToLast, loadBundle, namedQuery, onSnapshot, onSnapshotsInSync, orderBy, provideFirestore, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setLogLevel, snapToData, snapshotEqual, sortedChanges, startAfter, startAt, terminate, updateDoc, waitForPendingWrites, where, writeBatch };","map":{"version":3,"sources":["/Users/cristianfranco/Documents/University/redbicicletas-fe/node_modules/@angular/fire/fesm2015/angular-fire-firestore.js"],"names":["ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","ɵmemoizeInstance","VERSION","ɵAngularFireSchedulers","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","NgModule","NgZone","AuthInstances","FirebaseApp","FirebaseApps","registerVersion","collectionChanges","collectionChanges$1","collection","collection$1","sortedChanges","sortedChanges$1","auditTrail","auditTrail$1","collectionData","collectionData$1","doc","doc$1","docData","docData$1","snapToData","snapToData$1","fromRef","fromRef$1","addDoc","addDoc$1","arrayRemove","arrayRemove$1","arrayUnion","arrayUnion$1","clearIndexedDbPersistence","clearIndexedDbPersistence$1","collection$2","collectionGroup","collectionGroup$1","connectFirestoreEmulator","connectFirestoreEmulator$1","deleteDoc","deleteDoc$1","deleteField","deleteField$1","disableNetwork","disableNetwork$1","doc$2","documentId","documentId$1","enableIndexedDbPersistence","enableIndexedDbPersistence$1","enableMultiTabIndexedDbPersistence","enableMultiTabIndexedDbPersistence$1","enableNetwork","enableNetwork$1","endAt","endAt$1","endBefore","endBefore$1","getDoc","getDoc$1","getDocFromCache","getDocFromCache$1","getDocFromServer","getDocFromServer$1","getDocs","getDocs$1","getDocsFromCache","getDocsFromCache$1","getDocsFromServer","getDocsFromServer$1","getFirestore","getFirestore$1","increment","increment$1","initializeFirestore","initializeFirestore$1","limit","limit$1","limitToLast","limitToLast$1","loadBundle","loadBundle$1","namedQuery","namedQuery$1","onSnapshot","onSnapshot$1","onSnapshotsInSync","onSnapshotsInSync$1","orderBy","orderBy$1","query","query$1","queryEqual","queryEqual$1","refEqual","refEqual$1","runTransaction","runTransaction$1","serverTimestamp","serverTimestamp$1","setDoc","setDoc$1","setLogLevel","setLogLevel$1","snapshotEqual","snapshotEqual$1","startAfter","startAfter$1","startAt","startAt$1","terminate","terminate$1","updateDoc","updateDoc$1","waitForPendingWrites","waitForPendingWrites$1","where","where$1","writeBatch","writeBatch$1","Firestore","constructor","firestore","FIRESTORE_PROVIDER_NAME","FirestoreInstances","firestoreInstance$","pipe","PROVIDED_FIRESTORE_INSTANCES","defaultFirestoreInstanceFactory","provided","defaultApp","defaultFirestore","firestoreInstanceFactory","fn","zone","FIRESTORE_INSTANCES_PROVIDER","provide","deps","DEFAULT_FIRESTORE_INSTANCE_PROVIDER","useFactory","FirestoreModule","full","ɵfac","ɵmod","ɵinj","type","args","providers","provideFirestore","ngModule","multi","collectionSnapshots","docSnapshots"],"mappings":"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","sourcesContent":["import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, ɵmemoizeInstance, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone } from '@angular/core';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { collectionChanges as collectionChanges$1, collection as collection$1, sortedChanges as sortedChanges$1, auditTrail as auditTrail$1, collectionData as collectionData$1, doc as doc$1, docData as docData$1, snapToData as snapToData$1, fromRef as fromRef$1 } from 'rxfire/firestore';\nimport { addDoc as addDoc$1, arrayRemove as arrayRemove$1, arrayUnion as arrayUnion$1, clearIndexedDbPersistence as clearIndexedDbPersistence$1, collection as collection$2, collectionGroup as collectionGroup$1, connectFirestoreEmulator as connectFirestoreEmulator$1, deleteDoc as deleteDoc$1, deleteField as deleteField$1, disableNetwork as disableNetwork$1, doc as doc$2, documentId as documentId$1, enableIndexedDbPersistence as enableIndexedDbPersistence$1, enableMultiTabIndexedDbPersistence as enableMultiTabIndexedDbPersistence$1, enableNetwork as enableNetwork$1, endAt as endAt$1, endBefore as endBefore$1, getDoc as getDoc$1, getDocFromCache as getDocFromCache$1, getDocFromServer as getDocFromServer$1, getDocs as getDocs$1, getDocsFromCache as getDocsFromCache$1, getDocsFromServer as getDocsFromServer$1, getFirestore as getFirestore$1, increment as increment$1, initializeFirestore as initializeFirestore$1, limit as limit$1, limitToLast as limitToLast$1, loadBundle as loadBundle$1, namedQuery as namedQuery$1, onSnapshot as onSnapshot$1, onSnapshotsInSync as onSnapshotsInSync$1, orderBy as orderBy$1, query as query$1, queryEqual as queryEqual$1, refEqual as refEqual$1, runTransaction as runTransaction$1, serverTimestamp as serverTimestamp$1, setDoc as setDoc$1, setLogLevel as setLogLevel$1, snapshotEqual as snapshotEqual$1, startAfter as startAfter$1, startAt as startAt$1, terminate as terminate$1, updateDoc as updateDoc$1, waitForPendingWrites as waitForPendingWrites$1, where as where$1, writeBatch as writeBatch$1 } from 'firebase/firestore';\nexport * from 'firebase/firestore';\n\nclass Firestore {\n    constructor(firestore) {\n        return firestore;\n    }\n}\nconst FIRESTORE_PROVIDER_NAME = 'firestore';\nclass FirestoreInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(FIRESTORE_PROVIDER_NAME);\n    }\n}\nconst firestoreInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(FIRESTORE_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_FIRESTORE_INSTANCES = new InjectionToken('angularfire2.firestore-instances');\nfunction defaultFirestoreInstanceFactory(provided, defaultApp) {\n    const defaultFirestore = ɵgetDefaultInstanceOf(FIRESTORE_PROVIDER_NAME, provided, defaultApp);\n    // TODO how do I throw if it's undefined, unless @Optional(), is there an Angular NULL_INJECTOR token\n    // or something, can I use an @NgModule providers or something?\n    return new Firestore(defaultFirestore);\n}\nfunction firestoreInstanceFactory(fn) {\n    return (zone) => {\n        const firestore = ɵmemoizeInstance(fn, zone);\n        return new Firestore(firestore);\n    };\n}\nconst FIRESTORE_INSTANCES_PROVIDER = {\n    provide: FirestoreInstances,\n    deps: [\n        [new Optional(), PROVIDED_FIRESTORE_INSTANCES],\n    ]\n};\nconst DEFAULT_FIRESTORE_INSTANCE_PROVIDER = {\n    provide: Firestore,\n    useFactory: defaultFirestoreInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_FIRESTORE_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass FirestoreModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'fst');\n    }\n}\nFirestoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FirestoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFirestoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FirestoreModule });\nFirestoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FirestoreModule, providers: [\n        DEFAULT_FIRESTORE_INSTANCE_PROVIDER,\n        FIRESTORE_INSTANCES_PROVIDER,\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FirestoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_FIRESTORE_INSTANCE_PROVIDER,\n                        FIRESTORE_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideFirestore(fn) {\n    return {\n        ngModule: FirestoreModule,\n        providers: [{\n                provide: PROVIDED_FIRESTORE_INSTANCES,\n                useFactory: firestoreInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    // Firestore+Auth work better if Auth is loaded first\n                    [new Optional(), AuthInstances],\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst collectionChanges = ɵzoneWrap(collectionChanges$1, true);\nconst collectionSnapshots = ɵzoneWrap(collection$1, true);\nconst sortedChanges = ɵzoneWrap(sortedChanges$1, true);\nconst auditTrail = ɵzoneWrap(auditTrail$1, true);\nconst collectionData = ɵzoneWrap(collectionData$1, true);\nconst docSnapshots = ɵzoneWrap(doc$1, true);\nconst docData = ɵzoneWrap(docData$1, true);\nconst snapToData = ɵzoneWrap(snapToData$1, true);\nconst fromRef = ɵzoneWrap(fromRef$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst addDoc = ɵzoneWrap(addDoc$1, true);\nconst arrayRemove = ɵzoneWrap(arrayRemove$1, true);\nconst arrayUnion = ɵzoneWrap(arrayUnion$1, true);\nconst clearIndexedDbPersistence = ɵzoneWrap(clearIndexedDbPersistence$1, true);\nconst collection = ɵzoneWrap(collection$2, true);\nconst collectionGroup = ɵzoneWrap(collectionGroup$1, true);\nconst connectFirestoreEmulator = ɵzoneWrap(connectFirestoreEmulator$1, true);\nconst deleteDoc = ɵzoneWrap(deleteDoc$1, true);\nconst deleteField = ɵzoneWrap(deleteField$1, true);\nconst disableNetwork = ɵzoneWrap(disableNetwork$1, true);\nconst doc = ɵzoneWrap(doc$2, true);\nconst documentId = ɵzoneWrap(documentId$1, true);\nconst enableIndexedDbPersistence = ɵzoneWrap(enableIndexedDbPersistence$1, true);\nconst enableMultiTabIndexedDbPersistence = ɵzoneWrap(enableMultiTabIndexedDbPersistence$1, true);\nconst enableNetwork = ɵzoneWrap(enableNetwork$1, true);\nconst endAt = ɵzoneWrap(endAt$1, true);\nconst endBefore = ɵzoneWrap(endBefore$1, true);\nconst getDoc = ɵzoneWrap(getDoc$1, true);\nconst getDocFromCache = ɵzoneWrap(getDocFromCache$1, true);\nconst getDocFromServer = ɵzoneWrap(getDocFromServer$1, true);\nconst getDocs = ɵzoneWrap(getDocs$1, true);\nconst getDocsFromCache = ɵzoneWrap(getDocsFromCache$1, true);\nconst getDocsFromServer = ɵzoneWrap(getDocsFromServer$1, true);\nconst getFirestore = ɵzoneWrap(getFirestore$1, true);\nconst increment = ɵzoneWrap(increment$1, true);\nconst initializeFirestore = ɵzoneWrap(initializeFirestore$1, true);\nconst limit = ɵzoneWrap(limit$1, true);\nconst limitToLast = ɵzoneWrap(limitToLast$1, true);\nconst loadBundle = ɵzoneWrap(loadBundle$1, true);\nconst namedQuery = ɵzoneWrap(namedQuery$1, true);\nconst onSnapshot = ɵzoneWrap(onSnapshot$1, true);\nconst onSnapshotsInSync = ɵzoneWrap(onSnapshotsInSync$1, true);\nconst orderBy = ɵzoneWrap(orderBy$1, true);\nconst query = ɵzoneWrap(query$1, true);\nconst queryEqual = ɵzoneWrap(queryEqual$1, true);\nconst refEqual = ɵzoneWrap(refEqual$1, true);\nconst runTransaction = ɵzoneWrap(runTransaction$1, true);\nconst serverTimestamp = ɵzoneWrap(serverTimestamp$1, true);\nconst setDoc = ɵzoneWrap(setDoc$1, true);\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\nconst snapshotEqual = ɵzoneWrap(snapshotEqual$1, true);\nconst startAfter = ɵzoneWrap(startAfter$1, true);\nconst startAt = ɵzoneWrap(startAt$1, true);\nconst terminate = ɵzoneWrap(terminate$1, true);\nconst updateDoc = ɵzoneWrap(updateDoc$1, true);\nconst waitForPendingWrites = ɵzoneWrap(waitForPendingWrites$1, true);\nconst where = ɵzoneWrap(where$1, true);\nconst writeBatch = ɵzoneWrap(writeBatch$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Firestore, FirestoreInstances, FirestoreModule, addDoc, arrayRemove, arrayUnion, auditTrail, clearIndexedDbPersistence, collection, collectionChanges, collectionData, collectionGroup, collectionSnapshots, connectFirestoreEmulator, deleteDoc, deleteField, disableNetwork, doc, docData, docSnapshots, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, endAt, endBefore, firestoreInstance$, fromRef, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, increment, initializeFirestore, limit, limitToLast, loadBundle, namedQuery, onSnapshot, onSnapshotsInSync, orderBy, provideFirestore, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setLogLevel, snapToData, snapshotEqual, sortedChanges, startAfter, startAt, terminate, updateDoc, waitForPendingWrites, where, writeBatch };\n"]},"metadata":{},"sourceType":"module"}